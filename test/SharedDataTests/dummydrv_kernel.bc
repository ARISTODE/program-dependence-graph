; ModuleID = 'dummydrv_kernel.c'
source_filename = "dummydrv_kernel.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.data = type { i32*, i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dereference_ptr(%struct.data* %0) #0 !dbg !7 {
  %2 = alloca %struct.data*, align 8
  %3 = alloca i32, align 4
  store %struct.data* %0, %struct.data** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %2, metadata !18, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i32* %3, metadata !20, metadata !DIExpression()), !dbg !21
  %4 = load %struct.data*, %struct.data** %2, align 8, !dbg !22
  %5 = getelementptr inbounds %struct.data, %struct.data* %4, i32 0, i32 0, !dbg !23
  %6 = load i32*, i32** %5, align 8, !dbg !23
  %7 = load i32, i32* %6, align 4, !dbg !24
  store i32 %7, i32* %3, align 4, !dbg !21
  ret void, !dbg !25
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @controlled_malloc(%struct.data* %0) #0 !dbg !26 {
  %2 = alloca %struct.data*, align 8
  %3 = alloca i32*, align 8
  store %struct.data* %0, %struct.data** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %2, metadata !27, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.declare(metadata i32** %3, metadata !29, metadata !DIExpression()), !dbg !30
  %4 = load %struct.data*, %struct.data** %2, align 8, !dbg !31
  %5 = getelementptr inbounds %struct.data, %struct.data* %4, i32 0, i32 1, !dbg !32
  %6 = load i32, i32* %5, align 8, !dbg !32
  %7 = sext i32 %6 to i64, !dbg !31
  %8 = call noalias i8* @malloc(i64 %7) #3, !dbg !33
  %9 = bitcast i8* %8 to i32*, !dbg !33
  store i32* %9, i32** %3, align 8, !dbg !30
  ret void, !dbg !34
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_ptr(%struct.data* %0) #0 !dbg !35 {
  %2 = alloca %struct.data*, align 8
  store %struct.data* %0, %struct.data** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %2, metadata !36, metadata !DIExpression()), !dbg !37
  %3 = load %struct.data*, %struct.data** %2, align 8, !dbg !38
  %4 = getelementptr inbounds %struct.data, %struct.data* %3, i32 0, i32 0, !dbg !39
  %5 = load i32*, i32** %4, align 8, !dbg !39
  %6 = bitcast i32* %5 to i8*, !dbg !38
  call void @free(i8* %6) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @pointer_arithmetic(%struct.data* %0) #0 !dbg !42 {
  %2 = alloca %struct.data*, align 8
  %3 = alloca i32*, align 8
  store %struct.data* %0, %struct.data** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %2, metadata !43, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.declare(metadata i32** %3, metadata !45, metadata !DIExpression()), !dbg !46
  %4 = load %struct.data*, %struct.data** %2, align 8, !dbg !47
  %5 = getelementptr inbounds %struct.data, %struct.data* %4, i32 0, i32 0, !dbg !48
  %6 = load i32*, i32** %5, align 8, !dbg !48
  store i32* %6, i32** %3, align 8, !dbg !46
  %7 = load i32*, i32** %3, align 8, !dbg !49
  %8 = getelementptr inbounds i32, i32* %7, i32 1, !dbg !49
  store i32* %8, i32** %3, align 8, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sensitive_branch(%struct.data* %0) #0 !dbg !51 {
  %2 = alloca %struct.data*, align 8
  store %struct.data* %0, %struct.data** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %2, metadata !52, metadata !DIExpression()), !dbg !53
  %3 = load %struct.data*, %struct.data** %2, align 8, !dbg !54
  %4 = getelementptr inbounds %struct.data, %struct.data* %3, i32 0, i32 1, !dbg !56
  %5 = load i32, i32* %4, align 8, !dbg !56
  %6 = icmp sgt i32 %5, 10, !dbg !57
  br i1 %6, label %7, label %12, !dbg !58

7:                                                ; preds = %1
  %8 = load %struct.data*, %struct.data** %2, align 8, !dbg !59
  %9 = getelementptr inbounds %struct.data, %struct.data* %8, i32 0, i32 0, !dbg !61
  %10 = load i32*, i32** %9, align 8, !dbg !61
  %11 = bitcast i32* %10 to i8*, !dbg !59
  call void @free(i8* %11) #3, !dbg !62
  br label %12, !dbg !63

12:                                               ; preds = %7, %1
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @array_indexing(i32* %0, %struct.data* %1) #0 !dbg !65 {
  %3 = alloca i32*, align 8
  %4 = alloca %struct.data*, align 8
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  call void @llvm.dbg.declare(metadata i32** %3, metadata !68, metadata !DIExpression()), !dbg !69
  store %struct.data* %1, %struct.data** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.data** %4, metadata !70, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.declare(metadata i32* %5, metadata !72, metadata !DIExpression()), !dbg !73
  %6 = load i32*, i32** %3, align 8, !dbg !74
  %7 = load %struct.data*, %struct.data** %4, align 8, !dbg !75
  %8 = getelementptr inbounds %struct.data, %struct.data* %7, i32 0, i32 1, !dbg !76
  %9 = load i32, i32* %8, align 8, !dbg !76
  %10 = sext i32 %9 to i64, !dbg !74
  %11 = getelementptr inbounds i32, i32* %6, i64 %10, !dbg !74
  %12 = load i32, i32* %11, align 4, !dbg !74
  store i32 %12, i32* %5, align 4, !dbg !73
  ret void, !dbg !77
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 10.0.1-++20211003085942+ef32c611aa21-1~exp1~20211003090334.2", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "dummydrv_kernel.c", directory: "/home/yzh89/Documents/pdg/test/SharedDataTests")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"Ubuntu clang version 10.0.1-++20211003085942+ef32c611aa21-1~exp1~20211003090334.2"}
!7 = distinct !DISubprogram(name: "dereference_ptr", scope: !1, file: !1, line: 4, type: !8, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data", file: !12, line: 1, size: 128, elements: !13)
!12 = !DIFile(filename: "./header.h", directory: "/home/yzh89/Documents/pdg/test/SharedDataTests")
!13 = !{!14, !17}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !11, file: !12, line: 2, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !11, file: !12, line: 3, baseType: !16, size: 32, offset: 64)
!18 = !DILocalVariable(name: "input", arg: 1, scope: !7, file: !1, line: 4, type: !10)
!19 = !DILocation(line: 4, column: 35, scope: !7)
!20 = !DILocalVariable(name: "x", scope: !7, file: !1, line: 5, type: !16)
!21 = !DILocation(line: 5, column: 7, scope: !7)
!22 = !DILocation(line: 5, column: 13, scope: !7)
!23 = !DILocation(line: 5, column: 20, scope: !7)
!24 = !DILocation(line: 5, column: 11, scope: !7)
!25 = !DILocation(line: 6, column: 1, scope: !7)
!26 = distinct !DISubprogram(name: "controlled_malloc", scope: !1, file: !1, line: 8, type: !8, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!27 = !DILocalVariable(name: "input", arg: 1, scope: !26, file: !1, line: 8, type: !10)
!28 = !DILocation(line: 8, column: 37, scope: !26)
!29 = !DILocalVariable(name: "ptr", scope: !26, file: !1, line: 9, type: !15)
!30 = !DILocation(line: 9, column: 8, scope: !26)
!31 = !DILocation(line: 9, column: 21, scope: !26)
!32 = !DILocation(line: 9, column: 28, scope: !26)
!33 = !DILocation(line: 9, column: 14, scope: !26)
!34 = !DILocation(line: 10, column: 1, scope: !26)
!35 = distinct !DISubprogram(name: "free_ptr", scope: !1, file: !1, line: 12, type: !8, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!36 = !DILocalVariable(name: "input", arg: 1, scope: !35, file: !1, line: 12, type: !10)
!37 = !DILocation(line: 12, column: 28, scope: !35)
!38 = !DILocation(line: 13, column: 8, scope: !35)
!39 = !DILocation(line: 13, column: 15, scope: !35)
!40 = !DILocation(line: 13, column: 3, scope: !35)
!41 = !DILocation(line: 14, column: 1, scope: !35)
!42 = distinct !DISubprogram(name: "pointer_arithmetic", scope: !1, file: !1, line: 16, type: !8, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!43 = !DILocalVariable(name: "input", arg: 1, scope: !42, file: !1, line: 16, type: !10)
!44 = !DILocation(line: 16, column: 38, scope: !42)
!45 = !DILocalVariable(name: "ptr", scope: !42, file: !1, line: 17, type: !15)
!46 = !DILocation(line: 17, column: 8, scope: !42)
!47 = !DILocation(line: 17, column: 14, scope: !42)
!48 = !DILocation(line: 17, column: 21, scope: !42)
!49 = !DILocation(line: 18, column: 6, scope: !42)
!50 = !DILocation(line: 19, column: 1, scope: !42)
!51 = distinct !DISubprogram(name: "sensitive_branch", scope: !1, file: !1, line: 21, type: !8, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "input", arg: 1, scope: !51, file: !1, line: 21, type: !10)
!53 = !DILocation(line: 21, column: 36, scope: !51)
!54 = !DILocation(line: 22, column: 7, scope: !55)
!55 = distinct !DILexicalBlock(scope: !51, file: !1, line: 22, column: 7)
!56 = !DILocation(line: 22, column: 14, scope: !55)
!57 = !DILocation(line: 22, column: 19, scope: !55)
!58 = !DILocation(line: 22, column: 7, scope: !51)
!59 = !DILocation(line: 23, column: 10, scope: !60)
!60 = distinct !DILexicalBlock(scope: !55, file: !1, line: 22, column: 25)
!61 = !DILocation(line: 23, column: 17, scope: !60)
!62 = !DILocation(line: 23, column: 5, scope: !60)
!63 = !DILocation(line: 24, column: 3, scope: !60)
!64 = !DILocation(line: 25, column: 1, scope: !51)
!65 = distinct !DISubprogram(name: "array_indexing", scope: !1, file: !1, line: 27, type: !66, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!66 = !DISubroutineType(types: !67)
!67 = !{null, !15, !10}
!68 = !DILocalVariable(name: "arr", arg: 1, scope: !65, file: !1, line: 27, type: !15)
!69 = !DILocation(line: 27, column: 25, scope: !65)
!70 = !DILocalVariable(name: "input", arg: 2, scope: !65, file: !1, line: 27, type: !10)
!71 = !DILocation(line: 27, column: 47, scope: !65)
!72 = !DILocalVariable(name: "x", scope: !65, file: !1, line: 28, type: !16)
!73 = !DILocation(line: 28, column: 7, scope: !65)
!74 = !DILocation(line: 28, column: 11, scope: !65)
!75 = !DILocation(line: 28, column: 15, scope: !65)
!76 = !DILocation(line: 28, column: 22, scope: !65)
!77 = !DILocation(line: 29, column: 1, scope: !65)
