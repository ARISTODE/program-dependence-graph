// fieldencode.h was generated by ProtoGen version 2.12.c

#ifndef _FIELDENCODE_H
#define _FIELDENCODE_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * fieldencode provides routines to place numbers into a byte stream.
 *
 * fieldencode provides routines to place numbers in local memory layout into
 * a big or little endian byte stream. The byte stream is simply a sequence of
 * bytes, as might come from the data payload of a packet.
 *
 * Support is included for non-standard types such as unsigned 24. When
 * working with nonstandard types the data in memory are given using the next
 * larger standard type. For example an unsigned 24 is actually a uint32_t in
 * which the most significant byte is clear, and only the least significant
 * three bytes are placed into a byte stream
 *
 * Big or Little Endian refers to the order that a computer architecture will
 * place the bytes of a multi-byte word into successive memory locations. For
 * example the 32-bit number 0x01020304 can be placed in successive memory
 * locations in Big Endian: [0x01][0x02][0x03][0x04]; or in Little Endian:
 * [0x04][0x03][0x02][0x01]. The names "Big Endian" and "Little Endian" come
 * from Swift's Gulliver's travels, referring to which end of an egg should be
 * opened. The choice of name is made to emphasize the degree to which the
 * choice of memory layout is un-interesting, as long as one stays within the
 * local memory.
 *
 * When transmitting data from one computer to another that assumption no
 * longer holds. In computer-to-computer transmission there are three endians
 * to consider: the endianness of the sender, the receiver, and the protocol
 * between them. A protocol is Big Endian if it sends the most significant
 * byte first and the least significant last. If the computer and the protocol
 * have the same endianness then encoding data from memory into a byte stream
 * is a simple copy. However if the endianness is not the same then bytes must
 * be re-ordered for the data to be interpreted correctly.
 */

#define __STDC_CONSTANT_MACROS
#include <stdint.h>

//! Encode a null terminated string on a byte stream
void stringToBytes(const char* string, uint8_t* bytes, int* index, int maxLength, int fixedLength);

//! Copy an array of bytes to a byte stream without changing the order.
void bytesToBeBytes(const uint8_t* data, uint8_t* bytes, int* index, int num);

//! Copy an array of bytes to a byte stream while reversing the order.
void bytesToLeBytes(const uint8_t* data, uint8_t* bytes, int* index, int num);

#ifdef UINT64_MAX

//! Encode a unsigned 8 byte integer on a big endian byte stream.
void uint64ToBeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 8 byte integer on a little endian byte stream.
void uint64ToLeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a signed 8 byte integer on a big endian byte stream.
void int64ToBeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a signed 8 byte integer on a little endian byte stream.
void int64ToLeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 7 byte integer on a big endian byte stream.
void uint56ToBeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 7 byte integer on a little endian byte stream.
void uint56ToLeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a signed 7 byte integer on a big endian byte stream.
void int56ToBeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a signed 7 byte integer on a little endian byte stream.
void int56ToLeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 6 byte integer on a big endian byte stream.
void uint48ToBeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 6 byte integer on a little endian byte stream.
void uint48ToLeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a signed 6 byte integer on a big endian byte stream.
void int48ToBeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a signed 6 byte integer on a little endian byte stream.
void int48ToLeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 5 byte integer on a big endian byte stream.
void uint40ToBeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 5 byte integer on a little endian byte stream.
void uint40ToLeBytes(uint64_t number, uint8_t* bytes, int* index);

//! Encode a signed 5 byte integer on a big endian byte stream.
void int40ToBeBytes(int64_t number, uint8_t* bytes, int* index);

//! Encode a signed 5 byte integer on a little endian byte stream.
void int40ToLeBytes(int64_t number, uint8_t* bytes, int* index);

#endif // UINT64_MAX

//! Encode a 4 byte float on a big endian byte stream.
void float32ToBeBytes(float number, uint8_t* bytes, int* index);

//! Encode a 4 byte float on a little endian byte stream.
void float32ToLeBytes(float number, uint8_t* bytes, int* index);

//! Encode a unsigned 4 byte integer on a big endian byte stream.
void uint32ToBeBytes(uint32_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 4 byte integer on a little endian byte stream.
void uint32ToLeBytes(uint32_t number, uint8_t* bytes, int* index);

//! Encode a signed 4 byte integer on a big endian byte stream.
void int32ToBeBytes(int32_t number, uint8_t* bytes, int* index);

//! Encode a signed 4 byte integer on a little endian byte stream.
void int32ToLeBytes(int32_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 3 byte integer on a big endian byte stream.
void uint24ToBeBytes(uint32_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 3 byte integer on a little endian byte stream.
void uint24ToLeBytes(uint32_t number, uint8_t* bytes, int* index);

//! Encode a signed 3 byte integer on a big endian byte stream.
void int24ToBeBytes(int32_t number, uint8_t* bytes, int* index);

//! Encode a signed 3 byte integer on a little endian byte stream.
void int24ToLeBytes(int32_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 2 byte integer on a big endian byte stream.
void uint16ToBeBytes(uint16_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 2 byte integer on a little endian byte stream.
void uint16ToLeBytes(uint16_t number, uint8_t* bytes, int* index);

//! Encode a signed 2 byte integer on a big endian byte stream.
void int16ToBeBytes(int16_t number, uint8_t* bytes, int* index);

//! Encode a signed 2 byte integer on a little endian byte stream.
void int16ToLeBytes(int16_t number, uint8_t* bytes, int* index);

//! Encode a unsigned 1 byte integer on a byte stream.
void uint8ToBytes(uint8_t number, uint8_t* bytes, int* index);

//! Encode a signed 1 byte integer on a byte stream.
void int8ToBytes(int8_t number, uint8_t* bytes, int* index);

//! Encode a 8 byte float on a big endian byte stream.
void float64ToBeBytes(double number, uint8_t* bytes, int* index);

//! Encode a 8 byte float on a little endian byte stream.
void float64ToLeBytes(double number, uint8_t* bytes, int* index);

//! Encode a signed 3 byte integer on a big endian byte stream.
void float24ToBeBytes(float number, uint8_t* bytes, int* index, int sigbits);

//! Encode a signed 3 byte integer on a little endian byte stream.
void float24ToLeBytes(float number, uint8_t* bytes, int* index, int sigbits);

//! Encode a signed 2 byte integer on a big endian byte stream.
void float16ToBeBytes(float number, uint8_t* bytes, int* index, int sigbits);

//! Encode a signed 2 byte integer on a little endian byte stream.
void float16ToLeBytes(float number, uint8_t* bytes, int* index, int sigbits);

#ifdef __cplusplus
}
#endif
#endif
